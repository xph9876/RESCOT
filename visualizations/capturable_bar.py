#!/usr/bin/env python3
import argparse
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# read index
def read_index(fr):
    data = {}
    for l in fr:
        ws = l.rstrip('\n').split('\t')
        if len(ws) >= 2:
            data[ws[0]] = int(ws[1])
    return data


# read library list
def calc_bg_coverage(fr, index, mito):
    data = {}
    total = 0
    covered = 0
    for l in fr:
        ws = l.rstrip('\n').split('\t')
        if ws[0] == mito:
            coverage_mito = float(ws[1])
        elif ws[0] not in index:
            continue
        else:
            total += index[ws[0]]
            covered += index[ws[0]] * float(ws[1])
    return covered/total, coverage_mito


# summarize chromosomes and mitochondria
def summarize_df(df, coverage_bg, mito):
    df_mito = df[df.Chromosome == mito].rename(columns={'Count_ratio':'Count', 'Position_ratio':'Position'})
    df_others = df[~(df.Chromosome == mito)]
    df_others = df_others.groupby(by=['Library', 'RE'])\
        .agg({'Count_in_region':'sum', 'Total_count':'sum',\
            'Position_in_region':'sum', 'Total_position':'sum',
            'Chromosome':lambda x: 'Chromosomes'}).reset_index()
    df_others['Count'] = df_others['Count_in_region']/df_others['Total_count']
    df_others['Position'] = df_others['Position_in_region']/df_others['Total_position']
    df = pd.concat([df_mito, df_others])[['Library', 'RE', 'Chromosome', 'Count', 'Position']]
    df = df.set_index(['Library', 'RE', 'Chromosome'])
    df = df.stack(level=0).reset_index()
    df.columns = ['Library', 'RE', 'Chromosome', 'Coverage', 'Fraction']
    # add background
    for k, v in coverage_bg.items():
        df = df.append({'RE':k, 'Chromosome':mito, 'Coverage':'Background', 'Fraction':v[1]}, ignore_index=True)
        df = df.append({'RE':k, 'Chromosome':'Chromosomes', 'Coverage':'Background', 'Fraction':v[0]}, ignore_index=True)
    return df


def main():
    # input command line arguments
    parser = argparse.ArgumentParser(description='Draw bar chart for average coverage in rNMP count and location')
    parser.add_argument('tsv', type=argparse.FileType('r'), help='TSV file of rNMP incorporation count and position in captured data generated by capturable analysis')
    parser.add_argument('coverage_folder', help='Folder of BED file for RE coverage in reference genome, all coverage files with .coverage extension should be in this folder')
    parser.add_argument('index', type=argparse.FileType('r'), help='Fasta index file generated by samtools')
    parser.add_argument('-o', default = 'capturable_analysis', help = 'Output basename, default = capturable_analysis')
    parser.add_argument('--mito_name', default = 'chrM', help = 'Name of mitochondria in reference genome')
    args = parser.parse_args()

    # load data
    index = read_index(args.index)
    df = pd.read_csv(args.tsv, sep='\t')
    REs = df.RE.unique()
    coverage_bg = {}
    for RE in REs:
        with open(f'{args.coverage_folder}/{RE}.coverage') as fr:
            coverage_bg[RE] = calc_bg_coverage(fr, index, args.mito_name)

    # summarize df
    df = summarize_df(df, coverage_bg, args.mito_name)

    # draw bar plots
    sns.set(style='ticks', font_scale=2)
    for chrom in [args.mito_name, 'Chromosomes']:
        outname = args.o + f'_{chrom}_bar.png'.lower()
        data = df[df.Chromosome == chrom].sort_values(by='RE')
        fig, ax = plt.subplots(figsize=(6,6))
        plt.subplots_adjust(left=0.18, right=0.98, top=0.9, bottom=0.14)
        sns.barplot(x='RE', y='Fraction', hue='Coverage', hue_order=['Count','Position', 'Background'], data=data, ci='sd', errwidth=2, capsize=0.1, ax=ax)
        sns.swarmplot(x='RE', y='Fraction', hue='Coverage', hue_order=['Count','Position', 'Background'], data=data, ax=ax, color='#000000', dodge=True, size=5)
        ax.get_legend().remove()
        sns.despine()
        # x and y limit
        plt.ylim((0, 1))
        # label
        plt.ylabel(f'Fraction in covered region' )
        plt.xlabel('Restriction enzyme set')
        plt.savefig(f'{outname}.png')
        plt.close('all')

    print('Done!')



if __name__=='__main__':
    main()
