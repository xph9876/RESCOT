#!/usr/bin/env python3
import argparse
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# read index
def read_index(fr):
    data = {}
    for l in fr:
        ws = l.rstrip('\n').split('\t')
        if len(ws) >= 2:
            data[ws[0]] = int(ws[1])
    return data


# read bed file
def read_bed(fr, chrom, use_frequency):
    data = {'+':{}, '-':{}}
    # skip the rows after desired chromsome
    skip = False
    for l in fr:
        ws = l.rstrip('\n').split('\t')
        if len(ws) < 6:
            continue
        if ws[0] == chrom:
            skip = True
            if int(ws[1]) not in data[ws[5]]:
                data[ws[5]][int(ws[1])] = 0
            if use_frequency:
                data[ws[5]][int(ws[1])] += float(ws[3])
            else:
                data[ws[5]][int(ws[1])] += 1
        elif skip:
            break
    return data


# get captured fragments:
def get_captured_region(missing, index, chrom):
    data = {'+':[], '-':[]}
    for l in missing:
        ws = l.rstrip('\n').split('\t')
        if len(ws) < 6:
            continue
        if ws[0] == chrom:
            if int(ws[1]) == 0:
                data[ws[5]].append([int(ws[2])])
                continue
            if len(data[ws[5]]) == 0:
                data[ws[5]].append([0])
            data[ws[5]][-1].append(int(ws[1]))
            data[ws[5]].append([int(ws[2])])
    for s in ['+', '-']:
        if len(data[s]) > 0:
            if data[s][-1][0] != index[chrom]:
                data[s][-1].append(index[chrom])
            else:
                data[s].pop()
    return data


# check if the rNMPs are incorporated in the captured region
def check_rNMPs(rNMPs, region):
    for s in ['+', '-']:
        i = 0
        j = 0
        rs = list(sorted(rNMPs[s].keys()))
        while i<len(rs) and j<len(region[s]):
            if region[s][j][1] <= rs[i]:
                j += 1
                continue
            elif region[s][j][0] > rs[i]:
                rNMPs[s][rs[i]] = [-rNMPs[s][rs[i]], False]
                i += 1
            else:
                rNMPs[s][rs[i]] = [rNMPs[s][rs[i]], True]
                i += 1
        while i < len(rs):
            rNMPs[s][rs[i]] = [-rNMPs[s][rs[i]], False]
            i += 1
    return rNMPs


def main():
    # input command line arguments
    parser = argparse.ArgumentParser(description='Compare captured rNMP locations and expected capture region')
    parser.add_argument('bed', type=argparse.FileType('r'), help='BED file for rNMP incorporation')
    parser.add_argument('missing', type=argparse.FileType('r'), help='BED file for missing parts in reference genome')
    parser.add_argument('index', type=argparse.FileType('r'), help='Fasta index file generated by samtools')
    parser.add_argument('-o', default = 'comparison', help = 'output file base name, default = comparison')
    parser.add_argument('-f', action='store_true', help='Use the fourth column of the bed file as rNMP incorporation frequency')
    parser.add_argument('--chrom', default = 'chrM', help = 'Chromosomes to be analyzed')
    args = parser.parse_args()

    # load data
    index = read_index(args.index)
    rNMPs = read_bed(args.bed, args.chrom, args.f)
    captured_fragments = get_captured_region(args.missing, index, args.chrom)
    # find whether rNMPs are inside the region or not
    rNMPs = check_rNMPs(rNMPs, captured_fragments)

    # calculate ratio of inside/outside region
    total_counts = 0
    counts_in_region = 0
    positions_in_region = 0
    for s in ['+', '-']:
        for v in rNMPs[s].values():
            if v[1]:
                counts_in_region += abs(v[0])
                positions_in_region += 1
            total_counts += abs(v[0])
    total_positions = len(rNMPs['+']) + len(rNMPs['-'])
    counts_ratio = counts_in_region / total_counts
    positions_ratio = positions_in_region/ total_positions

    # scatter plot
    sns.set(style='ticks', font_scale=2)

    for s in ['+', '-']:
        fig, ax = plt.subplots(figsize=(12,6))
        plt.subplots_adjust(left=0.14, right=0.98, top=0.9, bottom=0.125)
        pos = list(rNMPs[s].keys())
        data = []
        for k in rNMPs[s].keys():
            data.append([k, rNMPs[s][k][0], rNMPs[s][k][1]])
        df = pd.DataFrame(data, columns=['Position', 'Count', 'Capturable'])
        sns.scatterplot(x='Position', y='Count', s=7, hue='Capturable', data=df, \
            hue_order=[True, False], linewidth=0, ax=ax, legend=False)
        sns.despine()
        # x and y limit
        plt.xlim((0, index[args.chrom]))
        ylim_max = max([abs(x) for x in ax.get_ylim()])
        plt.ylim((-ylim_max, ylim_max))
        # label
        plt.ylabel('rNMP count')
        plt.xlabel('rNMP location')
#        plt.suptitle(f'Counts_ratio={counts_ratio:.2%}, Positions_ratio={positions_ratio:.2%}')
        if s == '+':
            plt.savefig(f'{args.o}_forward.png')
        else:
            plt.savefig(f'{args.o}_reverse.png')
        plt.close('all')

    print('Done!')



if __name__=='__main__':
    main()
