#!/usr/bin/env python3
import sys
import argparse
import re

# argument parser
parser = argparse.ArgumentParser(description="Calculate coverage with missing part")
parser.add_argument('MISSING', type=argparse.FileType('r'), default=sys.stdin, help='Missing part, default = stdin')
parser.add_argument('GENOME', type=argparse.FileType('r'), help='Genome index generated by samtools')
parser.add_argument('-o', type=argparse.FileType('w'), default=sys.stdout, help='Output files')
args=parser.parse_args()

# get chrome and chrome length
# chrom[chrom] = length
chrom = {"OVERALL":0}
for line in args.GENOME:
    words = line.split('\t')
    chrom[words[0]] = int(words[1])
    chrom["OVERALL"] += int(words[1])

# get missing part length
missing = {}
for key in chrom.keys():
    missing[key] = 0.0
for line in args.MISSING:
    words = line.strip('\n').split('\t')
    if len(words) != 6:
        print('Invalid entry: ' + line + ', should be bed file with 6 columns')
        continue
    l = int(words[2]) - int(words[1])
    missing[words[0]]+= l
    missing['OVERALL'] += l

# output
for key in chrom.keys():
    args.o.write('{}\t{}\n'.format(key, str(1-missing[key]/chrom[key]/2)))
